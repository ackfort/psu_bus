// bus_data_monitor.dart (‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ä‡πâ Persistent State)

import 'dart:async';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:shared_preferences/shared_preferences.dart'; // <<< ‡πÄ‡∏û‡∏¥‡πà‡∏°
import '../models/bus.dart';
import '../models/bus_stop.dart';
import 'firestore_service.dart';
import 'notification_service.dart';

// ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
const int _CROWD_THRESHOLD = 19;

class BusDataMonitor {
  // Singleton Pattern
  BusDataMonitor._internal();
  static final BusDataMonitor _instance = BusDataMonitor._internal();
  factory BusDataMonitor() => _instance;

  final FirestoreService _firestoreService = FirestoreService();
  final NotificationService _notificationService = NotificationService();

  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Subscription
  StreamSubscription<QuerySnapshot>? _busSubscription;
  StreamSubscription<QuerySnapshot>? _busStopSubscription;
  
  // üí° ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ SharedPreferences ‡πÅ‡∏•‡∏∞ Keys ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ñ‡∏≤‡∏ß‡∏£
  late final SharedPreferences _prefs;
  static const String _KEY_CROWDED_BUSES = 'crowdedBusIds';
  static const String _KEY_CROWDED_STOPS = 'crowdedStopIds';

  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ SharedPreferences
  Future<void> _loadPersistentState() async {
    _prefs = await SharedPreferences.getInstance();
  }

  // Helper: ‡πÇ‡∏´‡∏•‡∏î Set ‡∏Ç‡∏≠‡∏á ID ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡πÅ‡∏ô‡πà‡∏ô‡∏à‡∏≤‡∏Å SharedPreferences
  Set<String> _getCrowdedIds(String key) {
    return _prefs.getStringList(key)?.toSet() ?? {};
  }

  // Helper: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Set ‡∏Ç‡∏≠‡∏á ID ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡πÅ‡∏ô‡πà‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á SharedPreferences
  Future<void> _saveCrowdedIds(String key, Set<String> ids) async {
    await _prefs.setStringList(key, ids.toList());
  }


  // 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  void startMonitoring() async {
    // ‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ñ‡∏≤‡∏ß‡∏£‡∏Å‡πà‡∏≠‡∏ô ‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á Stream ‡πÑ‡∏î‡πâ
    await _loadPersistentState(); // <<< ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

    stopMonitoring(); // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á Stream ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ö‡∏±‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    _busSubscription = _firestoreService.streamAllBuses().listen(
      _handleBusUpdates,
      onError: (error) => print('Bus Stream Error: $error'),
    );

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á Stream ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏ñ‡πÄ‡∏°‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    _busStopSubscription = _firestoreService.streamAllBusStops().listen(
      _handleBusStopUpdates,
      onError: (error) => print('Bus Stop Stream Error: $error'),
    );
  }

  // 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ö‡∏±‡∏™
  void _handleBusUpdates(QuerySnapshot snapshot) {
    // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å SharedPreferences
    Set<String> crowdedBuses = _getCrowdedIds(_KEY_CROWDED_BUSES);
    bool stateChanged = false; // Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Set ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

    for (var doc in snapshot.docs) {
      final Bus bus = Bus.fromFirestore(doc.data() as Map<String, dynamic>);
      final String busId = bus.busId; 

      if (bus.passengerCount > _CROWD_THRESHOLD) {
        
        // üí° Edge Triggering: ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏ô‡πà‡∏ô ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        if (!crowdedBuses.contains(busId)) {
          _notificationService.showCrowdAlertForBus(bus);
          crowdedBuses.add(busId); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Set 
          stateChanged = true;
        }
        
      } else {
        // ‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥)
        
        // üí° Edge Triggering: ‡∏´‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÅ‡∏ï‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
        if (crowdedBuses.contains(busId)) {
          _notificationService.cancelNotificationById(busId.hashCode);
          crowdedBuses.remove(busId); // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Set
          stateChanged = true;
        }
      }
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà SharedPreferences ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    if (stateChanged) {
      _saveCrowdedIds(_KEY_CROWDED_BUSES, crowdedBuses);
    }
  }

  // 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡πâ‡∏≤‡∏¢‡∏£‡∏ñ‡πÄ‡∏°‡∏•‡πå
  void _handleBusStopUpdates(QuerySnapshot snapshot) {
    // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å SharedPreferences
    Set<String> crowdedStops = _getCrowdedIds(_KEY_CROWDED_STOPS);
    bool stateChanged = false;

    for (var doc in snapshot.docs) {
      final BusStop busStop = BusStop.fromFirestore(doc);
      final String stopId = busStop.stopId; 

      if (busStop.passengerCount > _CROWD_THRESHOLD) {
        
        // üí° Edge Triggering: ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏ô‡πÅ‡∏ô‡πà‡∏ô ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        if (!crowdedStops.contains(stopId)) {
          _notificationService.showCrowdAlertForStop(busStop);
          crowdedStops.add(stopId); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Set
          stateChanged = true;
        }
        
      } else {
        // ‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß (‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥)
        
        // üí° Edge Triggering: ‡∏´‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÅ‡∏ï‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
        if (crowdedStops.contains(stopId)) {
          _notificationService.cancelNotificationById(stopId.hashCode);
          crowdedStops.remove(stopId); // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Set
          stateChanged = true;
        }
      }
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà SharedPreferences ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    if (stateChanged) {
      _saveCrowdedIds(_KEY_CROWDED_STOPS, crowdedStops);
    }
  }

  // 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π
  void stopMonitoring() {
    _busSubscription?.cancel();
    _busStopSubscription?.cancel();
  }
}